#ROC curve
plot.roc(df$BinaryPerfusion,fitted(model_final),plot=T,print.thres="best",legacy.axes=T,print.auc =T,col="blue4",add=T))
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
plot.roc(df$BinaryPerfusion,fitted(model_final),plot=T,print.thres="best",legacy.axes=T,print.auc =T,col="blue4",add=T)
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
plot.roc(df$BinaryPerfusion,fitted(model_final),print.thres="best",legacy.axes=T,print.auc =T,col="blue4",add=T)
plot.roc(df$BinaryPerfusion,fitted(model_final),
main="Confidence interval of a threshold", percent=TRUE, # compute AUC (of threshold)
thresholds="best", # select the (best) threshold
print.thres="best")
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
plot.roc(df$BinaryPerfusion,fitted(model_final),
main="Confidence interval of a threshold", percent=TRUE, # compute AUC (of threshold)
thresholds="best", # select the (best) threshold
print.thres="best", print.auc=T)
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
plot.roc(df$BinaryPerfusion,fitted(model_final),
main="Confidence interval of a threshold", percent=TRUE, # compute AUC (of threshold) # select the (best) threshold
print.thres="best", print.auc=T)
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
plot.roc(df$BinaryPerfusion,fitted(model_final),
main="ROC Curve", # compute AUC (of threshold) # select the (best) threshold
print.thres="best", print.auc=T)
#Confusion Matrix
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(lme4)
library(pROC)
library(arm)
library(leaps)
library(MASS)
library(caret)
df <- read.delim('heart.dat', header=FALSE, sep= ' ')
names(df) <- c('Age','Sex','ChestPainType', 'BloodPressure', 'SerumCholesterol', 'FastingBloodSugar', 'Resting Electrocardiograph', 'MaximumHeartRate', 'ExerciseAngina', 'ST Depression', 'Slope of Peak ST', 'NumberofColoredVessels', 'PerfusionDefect', 'HeartDisease')
#correlation <- cor(df, method='pearson')
#heatmap(correlation, col=c('blue','green', 'yellow', 'red') )
##Recoding Variables
df$PerfusionDefect <- as.factor(df$PerfusionDefect)
df$ChestPainType <- as.factor(df$ChestPainType)
df$HeartDisease <- as.factor(df$HeartDisease)
df$NumberofColoredVessels <- as.factor(df$NumberofColoredVessels)
df$ExerciseAngina <- as.factor(df$ExerciseAngina)
df$FastingBloodSugar<- as.factor(df$FastingBloodSugar)
df$Sex <- as.factor(df$Sex)
##Collapsing into perfused/ non-perfused just in case.
df$BinaryPerfusion <- ifelse((df$PerfusionDefect==6 | df$PerfusionDefect==7), 1,0)
##Exploratory Analysis
df$SerumCholesterol <- df$SerumCholesteral
df$SerumCholesteral<-NULL
summary(df)
length(df$Sex)
length(df$BinaryPerfusion)
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
plot.roc(df$BinaryPerfusion,fitted(model_final),
main="ROC Curve", # compute AUC (of threshold) # select the (best) threshold
print.thres="best", print.auc=T)
#Confusion Matrix.
predicted_class <- ifelse(fitted(model_final)>.360,1,0)
confusionMatrix(df$BinaryPefusion, predicted_class)
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
plot.roc(df$BinaryPerfusion,fitted(model_final),
main="ROC Curve", # compute AUC (of threshold) # select the (best) threshold
print.thres="best", print.auc=T)
#Confusion Matrix.
predicted_class <-ifelse(fitted(model_final)>.360,1,0)
predicted_class <- as.factor(predicted_class)
confusionMatrix(df$BinaryPefusion, predicted_class)
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
plot.roc(df$BinaryPerfusion,fitted(model_final),
main="ROC Curve", # compute AUC (of threshold) # select the (best) threshold
print.thres="best", print.auc=T)
#Confusion Matrix.
predicted_class <-ifelse(fitted(model_final)>.360,1,0)
predicted_class
confusionMatrix(df$BinaryPefusion, predicted_class)
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
plot.roc(df$BinaryPerfusion,fitted(model_final),
main="ROC Curve", # compute AUC (of threshold) # select the (best) threshold
print.thres="best", print.auc=T)
#Confusion Matrix.
predicted_class <-ifelse(fitted(model_final)>.360,1,0)
predicted_class
confusionMatrix(as.factor(df$BinaryPefusion), as.factor(predicted_class))
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
plot.roc(df$BinaryPerfusion,fitted(model_final),
main="ROC Curve", # compute AUC (of threshold) # select the (best) threshold
print.thres="best", print.auc=T)
#Confusion Matrix.
predicted_class <-ifelse(fitted(model_final)>.360,1,0)
confusionMatrix(as.factor(df$BinaryPefusion), as.factor(predicted_class))
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted),
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted)
main="ROC Curve", # compute AUC (of threshold) # select the (best) threshold
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted, main="ROC Curve",
print.thres="best", print.auc=T)
#Confusion Matrix.
predicted_class <-ifelse(predicted>.360,1,0)
confusionMatrix(as.factor(df$BinaryPefusion), as.factor(predicted_class))
mean(predicted_class)
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted, main="ROC Curve",
print.thres="best", print.auc=T)
#Confusion Matrix.
predicted_class <-ifelse(predicted>.360,1,0)
confusionMatrix(df$BinaryPefusion, predicted_class))
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted, main="ROC Curve",
print.thres="best", print.auc=T)
#Confusion Matrix.
predicted_class <-ifelse(predicted>.360,1,0)
confusionMatrix(df$BinaryPerfusion, predicted_class)
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted, main="ROC Curve",
print.thres="best", print.auc=T)
#Confusion Matrix.
predicted_class <-ifelse(predicted>.360,1,0)
confusionMatrix(df$BinaryPerfusion, as.factor(predicted_class))
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted, main="ROC Curve",
print.thres="best", print.auc=T)
#Confusion Matrix.
predicted_class <-ifelse(predicted>.360,1,0)
confusionMatrix(as.factor(df$BinaryPerfusion), as.factor(predicted_class))
draw_confusion_matrix <- function(cm) {
total <- sum(cm$table)
res <- as.numeric(cm$table)
# Generate color gradients. Palettes come from RColorBrewer.
greenPalette <- c("#F7FCF5","#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
redPalette <- c("#FFF5F0","#FEE0D2","#FCBBA1","#FC9272","#FB6A4A","#EF3B2C","#CB181D","#A50F15","#67000D")
getColor <- function (greenOrRed = "green", amount = 0) {
if (amount == 0)
return("#FFFFFF")
palette <- greenPalette
if (greenOrRed == "red")
palette <- redPalette
colorRampPalette(palette)(100)[10 + ceiling(90 * amount / total)]
}
# set the basic layout
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX', cex.main=2)
# create the matrix
classes = colnames(cm$table)
rect(150, 430, 240, 370, col=getColor("green", res[1]))
text(195, 435, classes[1], cex=1.2)
rect(250, 430, 340, 370, col=getColor("red", res[3]))
text(295, 435, classes[2], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col=getColor("red", res[2]))
rect(250, 305, 340, 365, col=getColor("green", res[4]))
text(140, 400, classes[1], cex=1.2, srt=90)
text(140, 335, classes[2], cex=1.2, srt=90)
# add in the cm results
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted, main="ROC Curve",
print.thres="best", print.auc=T)
#Confusion Matrix.
predicted_class <-ifelse(predicted>.360,1,0)
cm_1<- confusionMatrix(as.factor(df$BinaryPerfusion), as.factor(predicted_class))
draw_confusion_matrix(cm_1)
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted, main="ROC Curve",
print.thres="best", print.auc=T, col="#008600")
#Confusion Matrix.
predicted_class <-ifelse(predicted>.360,1,0)
cm_1<- confusionMatrix(as.factor(df$BinaryPerfusion), as.factor(predicted_class))
draw_confusion_matrix(cm_1)
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect +`ST Depression`*`Slope of Peak ST`, data = df, family='binomial')
#summary(model)
##Binary Model
model_binary <- glm(BinaryPerfusion ~. -HeartDisease -PerfusionDefect -ChestPainType- NumberofColoredVessels, data= df, family='binomial')
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure +
`Resting Electrocardiograph` + ExerciseAngina + `ST Depression` +
`Slope of Peak ST`  , data = df, family='binomial')
summary(model_final)
##Exponentiated Coefficients
exp_coefs <- exp(coef(model_final))
exp_coefs
#Chisq test for categorical variables.
chisq.test(df$BinaryPerfusion, df$Sex)
chisq.test(df$BinaryPerfusion, df$ExerciseAngina)
chisq.test(df$BinaryPerfusion, df$FastingBloodSugar)
chisq.test(df$BinaryPerfusion, df$ChestPainType)
#Boxplots
ggplot(df, aes(x= as.factor(BinaryPerfusion), y=BloodPressure))+geom_boxplot()
ggplot(df, aes(x= as.factor(BinaryPerfusion), y=`Slope of Peak ST`))+geom_boxplot()
ggplot(df, aes(x= as.factor(BinaryPerfusion), y=`ST Depression`))+geom_boxplot()
ggplot(df, aes(x= as.factor(BinaryPerfusion), y=MaximumHeartRate))+geom_boxplot()
ggplot(df, aes(x= as.factor(BinaryPerfusion), y=Age))+geom_boxplot()
#Binned plots
binnedplot(y=df$BinaryPerfusion, df$BloodPressure,xlab="Blood Pressure",ylim=c(0,1),col.pts="navy", ylab ='Perfusion',main="Binned Blood Pressure and Perfusion Status",col.int="white")
binnedplot(y=df$BinaryPerfusion, df$`Slope of Peak ST`,xlab="Peak ST Slope",ylim=c(0,1),col.pts="navy", ylab ='Perfusion',main="Peak ST Slope and Perfusion Status",col.int="white")
binnedplot(y=df$BinaryPerfusion, df$`ST Depression`,xlab="ST Depression",ylim=c(0,1),col.pts="navy", ylab ='Perfusion',main="ST Depression and Perfusion Status",col.int="white")
binnedplot(y=df$BinaryPerfusion, df$MaximumHeartRate,xlab="Maximum Heart Rate",ylim=c(0,1),col.pts="navy", ylab ='Perfusion',main="Maximum Heart Rate and Perfusion Status",col.int="white")
binnedplot(y=df$BinaryPerfusion, df$Age,xlab="Age",ylim=c(0,1),col.pts="green", ylab ='Perfusion',main="Age and Perfusion Status",col.int="white")
binnedplot(y=df$BinaryPerfusion, df$Age,xlab="Age",ylim=c(0,1),col.pts="mediumseagreen", ylab ='Perfusion',main="Age and Perfusion Status",col.int="white")
#Chisq test for categorical variables.
chisq.test(df$BinaryPerfusion, df$Sex)
chisq.test(df$BinaryPerfusion, df$ExerciseAngina)
chisq.test(df$BinaryPerfusion, df$FastingBloodSugar)
chisq.test(df$BinaryPerfusion, df$ChestPainType)
#Boxplots
ggplot(df, aes(x= as.factor(BinaryPerfusion), y=BloodPressure))+geom_boxplot()
ggplot(df, aes(x= as.factor(BinaryPerfusion), y=`Slope of Peak ST`))+geom_boxplot()
ggplot(df, aes(x= as.factor(BinaryPerfusion), y=`ST Depression`))+geom_boxplot()
ggplot(df, aes(x= as.factor(BinaryPerfusion), y=MaximumHeartRate))+geom_boxplot()
ggplot(df, aes(x= as.factor(BinaryPerfusion), y=Age))+geom_boxplot()
#Binned plots
binnedplot(y=df$BinaryPerfusion, df$BloodPressure,xlab="Blood Pressure",ylim=c(0,1),col.pts="navy", ylab ='Perfusion',main="Binned Blood Pressure and Perfusion Status",col.int="white")
binnedplot(y=df$BinaryPerfusion, df$`Slope of Peak ST`,xlab="Peak ST Slope",ylim=c(0,1),col.pts="navy", ylab ='Perfusion',main="Peak ST Slope and Perfusion Status",col.int="white")
binnedplot(y=df$BinaryPerfusion, df$`ST Depression`,xlab="ST Depression",ylim=c(0,1),col.pts="navy", ylab ='Perfusion',main="ST Depression and Perfusion Status",col.int="white")
binnedplot(y=df$BinaryPerfusion, df$MaximumHeartRate,xlab="Maximum Heart Rate",ylim=c(0,1),col.pts="navy", ylab ='Perfusion',main="Maximum Heart Rate and Perfusion Status",col.int="white")
binnedplot(y=df$BinaryPerfusion, df$Age,xlab="Age",ylim=c(0,1),col.pts="mediumseagreen", ylab ='Perfusion',main="Age and Perfusion Status",col.int="white")
exp_coefs <- exp(coef(model_final))
exp_coefs
exp_ci <- exp(confint(coef(model_final)))
exp_ci <- confint(coef(model_final))
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect +`ST Depression`*`Slope of Peak ST`, data = df, family='binomial')
#summary(model)
##Binary Model
model_binary <- glm(BinaryPerfusion ~. -HeartDisease -PerfusionDefect -ChestPainType- NumberofColoredVessels, data= df, family='binomial')
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure +
`Resting Electrocardiograph` + ExerciseAngina + `ST Depression` +
`Slope of Peak ST`  , data = df, family='binomial')
summary(model_final)
##Exponentiated Coefficients
exp_coefs <- exp(coef(model_final))
exp_coefs
exp_ci <- confint(model_final)
exp_ci <- exp(exp_ci)
exp_coefs <- exp(coef(model_final))
exp_coefs
exp_ci <- confint(model_final)
exp_ci <- exp(exp_ci)
exp_ci
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST`, data = df, family='binomial')
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate`, data = df, family='binomial')
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate`, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure +
`Resting Electrocardiograph` + ExerciseAngina + `ST Depression` +
`Slope of Peak ST`  , data = df, family='binomial')
summary(model_final)
##Exponentiated Coefficients
exp_coefs <- exp(coef(model_final))
exp_coefs
exp_ci <- confint(model_final)
exp_ci <- exp(exp_ci)
exp_ci
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted, main="ROC Curve",
print.thres="best", print.auc=T, col="#008600")
#Confusion Matrix.
predicted_class <-ifelse(predicted>.360,1,0)
cm_1<- confusionMatrix(as.factor(df$BinaryPerfusion), as.factor(predicted_class))
draw_confusion_matrix(cm_1)
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure +
`Resting Electrocardiograph` + ExerciseAngina  , data = df, family='binomial')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure +
`Resting Electrocardiograph` + ExerciseAngina  , data = df, family='binomial')
summary(model_final)
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate` -`NumberofColoredVessels, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure +
`Resting Electrocardiograph` + ExerciseAngina  , data = df, family='binomial')
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate` -`NumberofColoredVessels, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure +
`Resting Electrocardiograph` + ExerciseAngina , data = df, family='binomial')
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate` -`NumberofColoredVessels, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure +`Resting Electrocardiograph` + ExerciseAngina , data = df, family='binomial')
summary(AIC_Model)
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate` -`NumberofColoredVessels, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure +`Resting Electrocardiograph` + ExerciseAngina , data = df, family='binomial')
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate` -`NumberofColoredVessels, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure + `Resting Electrocardiograph` + ExerciseAngina , data = df, family='binomial')
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate` -`NumberofColoredVessels, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure + ExerciseAngina , data = df, family='binomial')
summary(model_final)
##Exponentiated Coefficients
exp_coefs <- exp(coef(model_final))
exp_coefs
exp_ci <- confint(model_final)
exp_ci <- exp(exp_ci)
exp_ci
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate` -`NumberofColoredVessels, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure + ExerciseAngina +`Resting Electrocardiograph`, data = df, family='binomial')
summary(AIC_Model)
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate` -NumberofColoredVessels, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure + ExerciseAngina +`Resting Electrocardiograph`, data = df, family='binomial')
summary(model_final)
##Exponentiated Coefficients
exp_coefs <- exp(coef(model_final))
exp_coefs
exp_ci <- confint(model_final)
exp_ci <- exp(exp_ci)
exp_ci
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate` -NumberofColoredVessels, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure + ExerciseAngina , data = df, family='binomial')
summary(model_final)
##Exponentiated Coefficients
exp_coefs <- exp(coef(model_final))
exp_coefs
exp_ci <- confint(model_final)
exp_ci <- exp(exp_ci)
exp_ci
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted, main="ROC Curve",
print.thres="best", print.auc=T, col="#008600")
#Confusion Matrix.
predicted_class <-ifelse(predicted>.360,1,0)
cm_1<- confusionMatrix(as.factor(df$BinaryPerfusion), as.factor(predicted_class))
draw_confusion_matrix(cm_1)
#Binned plot
binnedplot(fitted(model_final),residuals(model_final,"resp"),xlab="Pred. probabilities",col.int="red4",ylab="Avg. residuals",main="Binned residual plot",col.pts="navy")
#ROC curve
predicted<- fitted(model_final)
plot.roc(df$BinaryPerfusion,predicted, main="ROC Curve",
print.thres="best", print.auc=T, col="#008600")
#Confusion Matrix.
predicted_class <-ifelse(predicted>.576,1,0)
cm_1<- confusionMatrix(as.factor(df$BinaryPerfusion), as.factor(predicted_class))
draw_confusion_matrix(cm_1)
summary(AIC_Model)
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate` -NumberofColoredVessels, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure + ExerciseAngina , data = df, family='binomial')
summary(model_final)
##Exponentiated Coefficients
exp_coefs <- exp(coef(model_final))
exp_coefs
exp_ci <- confint(model_final)
exp_ci <- exp(exp_ci)
kable::exp_ci
##Full Binary Model
model_full <- glm(BinaryPerfusion ~ . -HeartDisease - PerfusionDefect-`ST Depression` -`Slope of Peak ST` -`MaximumHeartRate` -NumberofColoredVessels, data = df, family='binomial')
#summary(model)
##Let's just try stepwise selection.
AIC_Model <- stepAIC(model_full, trace = FALSE, method='backward')
summary(AIC_Model)
##Output of final selected model
model_final <- glm(BinaryPerfusion ~ Sex + ChestPainType + BloodPressure + ExerciseAngina , data = df, family='binomial')
summary(model_final)
##Exponentiated Coefficients
exp_coefs <- exp(coef(model_final))
exp_coefs
exp_ci <- confint(model_final)
exp_ci <- exp(exp_ci)
exp_ci
